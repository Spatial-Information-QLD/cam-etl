# GraphDB needs Docker Desktop to have at least 8GB to function at a reasonable performance.

services:
  postgres:
    build:
      dockerfile: ./Dockerfile
      context: .
    command: >-
      -c max_wal_size=4GB
    # shm_size required when running ETL on large tables
    shm_size: "2gb"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # - ./QSC_Extracted_Data_20250314_144132175583-7180:/tmp/qrt
      # - ./postgres-backup:/tmp/postgres-backup
    ports:
      - 5432:5432
    networks:
      - postgres
    profiles:
      - postgres

  graphdb:
    image: ontotext/graphdb:10.8.5
    volumes:
      - graphdb-data:/opt/graphdb/home
    ports:
      - 7200:7200
    environment:
      GDB_JAVA_OPTS: >-
        -Xmx8g -Xms2g
        -Dgraphdb.home=/opt/graphdb/home
        -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/graphdb-import
        -Dgraphdb.workbench.cors.enable=true
        -Denable-context-index=true
        -Dentity-pool-implementation=transactional
        -Dhealth.max.query.time.seconds=600
        -Dgraphdb.append.request.id.headers=true
        -Dreuse.vars.in.subselects=true
    networks:
      - graphdb
      - web
    profiles:
      - graphdb

  preload:
    container_name: graphdb-preload
    image: ontotext/graphdb:10.8.5
    entrypoint:
      [
        "/opt/graphdb/dist/bin/importrdf",
        "preload",
        "--force",
        "--restart",
        "--id",
        "addressing",
        "/opt/graphdb/home/graphdb-import",
      ]
    environment:
      GDB_JAVA_OPTS: >-
        -Xmx8g -Xms2g
        -Dgraphdb.home=/opt/graphdb/home
        -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/graphdb-import
        -Dgraphdb.workbench.cors.enable=true
        -Denable-context-index=true
        -Dentity-pool-implementation=transactional
        -Dhealth.max.query.time.seconds=600
        -Dgraphdb.append.request.id.headers=true
        -Dreuse.vars.in.subselects=true
    volumes:
      - graphdb-data:/opt/graphdb/home
      - ./graphdb-import:/opt/graphdb/home/graphdb-import
    networks:
      - preload
    profiles:
      - graphdb:preload

  web:
    image: ghcr.io/spatial-information-qld/cam-web
    environment:
      - GRAPHDB_URL=http://graphdb:7200
    ports:
      - 8000:8000
    networks:
      - web
    profiles:
      - web

  fuseki:
    build:
      context: ./fuseki
      dockerfile: Dockerfile.fuseki
    ports:
      - 3030:3030
    volumes:
      - fuseki-data:/fuseki
      - ./fuseki-import:/tmp/fuseki-import
    environment:
      - JAVA_OPTIONS=-Xmx4096m -Xms4096m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/$/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    profiles:
      - fuseki

  meilisearch:
    image: getmeili/meilisearch:v1.12
    ports:
      - 7700:7700
    volumes:
      - meilisearch-data:/meili_data
    profiles:
      - meilisearch

  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: "jc21/nginx-proxy-manager:latest"
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - "80:80" # Public HTTP Port
      - "443:443" # Public HTTPS Port
      - "81:81" # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP

    # Uncomment the next line if you uncomment anything in the section
    # environment:
    # Uncomment this if you want to change the location of
    # the SQLite DB file within the container
    # DB_SQLITE_FILE: "/data/database.sqlite"

    # Uncomment this if IPv6 is not enabled on your host
    # DISABLE_IPV6: 'true'

    volumes:
      - nginx-data:/data
      - nginx-letsencrypt:/etc/letsencrypt

    profiles:
      - nginx

volumes:
  postgres-data:
  graphdb-data:
  fuseki-data:
  nginx-data:
  nginx-letsencrypt:
  meilisearch-data:

networks:
  postgres:
  graphdb:
  preload:
  web:
