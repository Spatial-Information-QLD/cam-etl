import csv
from datetime import datetime

from pydantic import BaseModel
from rdflib import Graph, URIRef, Literal
from rdflib.namespace import RDF, SKOS, DCTERMS, XSD


class Row(BaseModel):
    placetype: str
    descrpt: str

    @property
    def uri(self):
        return "https://linked.data.gov.au/def/placenametype/" + self.placetype


def generate_pntypes():
    with open("pndb/lapnpdba.pntypes.csv", newline="", encoding="utf-8-sig") as file:
        reader = csv.DictReader(file)
        graph = Graph()
        graph.bind("skos", SKOS)
        graph.bind("dcterms", DCTERMS)

        provenance_info = Literal(
            "Generated by Spatial Information, Queensland Government on a dump of PNDB data."
        )

        concept_scheme = URIRef("https://linked.data.gov.au/def/placenametype")
        graph.add((concept_scheme, RDF.type, SKOS.ConceptScheme)).add(
            (concept_scheme, SKOS.prefLabel, Literal("Place Name Types"))
        ).add((concept_scheme, SKOS.definition, Literal("Place name types."))).add(
            (
                concept_scheme,
                DCTERMS.created,
                Literal(datetime.now(), datatype=XSD.date),
            )
        ).add(
            (
                concept_scheme,
                DCTERMS.modified,
                Literal(datetime.now(), datatype=XSD.date),
            )
        ).add(
            (concept_scheme, DCTERMS.provenance, provenance_info)
        )

        for csvrow in reader:
            row = Row(**csvrow)
            concept = URIRef(row.uri)

            graph.add((concept, RDF.type, SKOS.Concept)).add(
                (concept, SKOS.prefLabel, Literal(row.descrpt))
            ).add((concept, SKOS.definition, Literal(row.descrpt))).add(
                (concept, DCTERMS.provenance, provenance_info)
            ).add(
                (concept, SKOS.inScheme, concept_scheme)
            ).add(
                (concept_scheme, SKOS.hasTopConcept, concept)
            )

        graph.serialize("pntypes.ttl", format="longturtle")
